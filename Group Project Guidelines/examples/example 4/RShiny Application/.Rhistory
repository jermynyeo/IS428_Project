uniqueLabel = unique(GAStech_nodes_visNetwork$group)
legend_node <- data.frame(label = uniqueLabel, color=c("#C33C23", "#77DF79", "#799FCB", "#FFB447", "#B29DD9", "#FCE2C2"))
GAStech_nodes_visNetwork$title <- paste0(GAStech_nodes_visNetwork$label, "<br> Department: ",
GAStech_nodes_visNetwork$group,
"<br> Title: ", GAStech_nodes_visNetwork$Title)
GAStech_nodes_visNetwork$color <- plyr::mapvalues(GAStech_nodes_visNetwork$group, from = legend_node$label, to = levels(legend_node$color))
legend_nodes <- data.frame(label = unique(GAStech_nodes_visNetwork$group, color=unique(GAStech_nodes_visNetwork$color)))
#GAStech_nodes_visNetwork$color <- ifelse(GAStech_nodes_visNetwork$group = legend_node$label, levels(legend_node$color), "")
#legend_node$color
View(legend_nodes)
legend_nodes <- data.frame(label = unique(GAStech_nodes_visNetwork$group, color=unique(GAStech_nodes_visNetwork$color)))
uniquecolor = unique(GAStech_nodes_visNetwork$color)
legend_nodes <- data.frame(label = unique(GAStech_nodes_visNetwork$group), color= uniquecolor))
uniquecolor = unique(GAStech_nodes_visNetwork$color)
legend_nodes <- data.frame(label = unique(GAStech_nodes_visNetwork$group), color= uniquecolor)
visNetwork(GAStech_nodes_visNetwork, GAStech_edges_aggregated_visNetwork,
main = "Task 2: Interactive Network Graph Makeover")%>%
# Optimization
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(smooth = FALSE) %>%
visPhysics(stabilization = FALSE) %>%
# Customization
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%
visNodes(labelHighlightBold = TRUE, font = list(size=30), shape="box") %>%
#scaling = list(label=list(Threshold=30, maxVisible=60))) %>%
visOptions(highlightNearest = list(enabled = TRUE, hover = FALSE, algorithm = "hierarchical"),
nodesIdSelection = list(enabled = TRUE, main = "Employee"),
selectedBy = list(variable="group", main="Department")) %>%
visLegend(position="right", zoom=FALSE, addNodes = legend_nodes, useGroups = FALSE)
visNetwork(GAStech_nodes_visNetwork, GAStech_edges_aggregated_visNetwork,
main = "Task 2: Interactive Network Graph Makeover")%>%
# Optimization
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(smooth = FALSE) %>%
visPhysics(stabilization = FALSE) %>%
# Customization
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%
visNodes(labelHighlightBold = TRUE, font = list(size=30), shape="box") %>%
#scaling = list(label=list(Threshold=30, maxVisible=60))) %>%
visOptions(highlightNearest = list(enabled = TRUE, hover = FALSE, algorithm = "hierarchical"),
nodesIdSelection = list(enabled = TRUE, main = "Employee"),
selectedBy = list(variable="group", main="Department")) %>%
visLegend(width=0.1, position="right", zoom=FALSE, addNodes = legend_nodes, useGroups = FALSE)
visNetwork(GAStech_nodes_visNetwork, GAStech_edges_aggregated_visNetwork,
main = "Task 2: Interactive Network Graph Makeover")%>%
# Optimization
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(smooth = FALSE) %>%
visPhysics(stabilization = FALSE) %>%
# Customization
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%
visNodes(labelHighlightBold = TRUE, font = list(size=30), shape="box") %>%
#scaling = list(label=list(Threshold=30, maxVisible=60))) %>%
visOptions(highlightNearest = list(enabled = TRUE, hover = FALSE, algorithm = "hierarchical"),
nodesIdSelection = list(enabled = TRUE, main = "Employee"),
selectedBy = list(variable="group", main="Department")) %>%
visLegend(width=0.5, position="right", zoom=FALSE, addNodes = legend_nodes, useGroups = FALSE)
visNetwork(GAStech_nodes_visNetwork, GAStech_edges_aggregated_visNetwork,
main = "Task 2: Interactive Network Graph Makeover")%>%
# Optimization
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(smooth = FALSE) %>%
visPhysics(stabilization = FALSE) %>%
# Customization
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%
visNodes(labelHighlightBold = TRUE, font = list(size=30), shape="box") %>%
#scaling = list(label=list(Threshold=30, maxVisible=60))) %>%
visOptions(highlightNearest = list(enabled = TRUE, hover = FALSE, algorithm = "hierarchical"),
nodesIdSelection = list(enabled = TRUE, main = "Employee"),
selectedBy = list(variable="group", main="Department")) %>%
visLegend(width=0.1, position="right", zoom=FALSE, addNodes = legend_nodes, useGroups = FALSE)
visNetwork(GAStech_nodes_visNetwork, GAStech_edges_aggregated_visNetwork,
main = "Task 2: Interactive Network Graph Makeover")%>%
# Optimization
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(smooth = FALSE) %>%
visPhysics(stabilization = FALSE) %>%
# Customization
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%
visNodes(labelHighlightBold = TRUE, font = list(size=30), shape="box") %>%
#scaling = list(label=list(Threshold=30, maxVisible=60))) %>%
visOptions(highlightNearest = list(enabled = TRUE, hover = FALSE, algorithm = "hierarchical"),
nodesIdSelection = list(enabled = TRUE, main = "Employee"),
selectedBy = list(variable="group", main="Department")) %>%
visLegend(width=0.3, position="right", zoom=FALSE, addNodes = legend_nodes, useGroups = FALSE)
visNetwork(GAStech_nodes_visNetwork, GAStech_edges_aggregated_visNetwork,
main = "Task 2: Interactive Network Graph Makeover")%>%
# Optimization
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(smooth = FALSE) %>%
visPhysics(stabilization = FALSE) %>%
# Customization
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%
visNodes(labelHighlightBold = TRUE, font = list(size=30), shape="box") %>%
#scaling = list(label=list(Threshold=30, maxVisible=60))) %>%
visOptions(highlightNearest = list(enabled = TRUE, hover = FALSE, algorithm = "hierarchical"),
nodesIdSelection = list(enabled = TRUE, main = "Employee"),
selectedBy = list(variable="group", main="Department")) %>%
visLegend(width=0.2, position="right", zoom=FALSE, addNodes = legend_nodes, useGroups = FALSE)
runApp('D:/SMU/Term7/IS428 - Visual Analytics/Project/Project V1')
runApp('D:/SMU/Term7/IS428 - Visual Analytics/Project/Project V1')
runApp('D:/SMU/Term7/IS428 - Visual Analytics/Project/Cakrawala/TradeBalance.R')
runApp('D:/SMU/Term7/IS428 - Visual Analytics/Project/Project V1')
runApp('D:/SMU/Term7/IS428 - Visual Analytics/Project/Cakrawala')
runApp('D:/SMU/Term7/IS428 - Visual Analytics/Project/Cakrawala/Percentile.R')
![an image caption Source: Ultimate Funny Dog Videos Compilation 2013.](data/Testing.jpg)
![](data/Testing.jpg)
![](data/Testing.jpg)
include_graphics(data/Testing.jpg)
library(jpeg)
include_graphics(data/Testing.jpg)
library(jpeg)
readJPEG(data/Testing.jpg)
library(jpeg)
readJPEG(/data/Testing.jpg)
library(jpeg)
readJPEG(/data/Testing.jpeg)
library(jpeg)
readJPEG("data/Testing.jpeg")
library(jpeg)
readJPEG(data/Testing.jpg)
library(jpeg)
readJPEG(data/Testing)
library(jpeg)
readJPEG(data/Testing.jpg)
library(jpeg)
knitr::include_graphics(data/Testing.jpg)
library(jpeg)
knitr::include_graphics(data/Testing)
library(jpeg)
knitr::include_graphics(data/Testing.jpg)
library(jpeg)
knitr::include_graphics(D:\SMU\Term7\IS428 - Visual Analytics\Project\Project V1\data\Testing.jpg)
library(jpeg)
knitr::include_graphics(data/Testing.jpg)
library(rgdal)
library(ggplot2)
library(tidyverse)
library(mapproj)
library(plotly)
require(maps)
require(mapdata)
library('treemap')
install.packages("treemap")
library('treemap')
categoryExport <-read_csv("data/Export_Goods_Category.csv")
library('treemap')
categoryExport <-read_csv("data/Export_Goods_Category.csv")
NewYear <- filter(categoryExport, Year=2018)
library('treemap')
categoryExport <-read_csv("data/Export_Goods_Category.csv")
NewYear <- filter(categoryExport, Year==2018)
View(NewYear)
treemap(categoryExport,
index=c("Planning Region", "Planning Area", "Project Name"),
vSize="Export",
vColor="Type",
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap(categoryExport,
vSize="Export",
vColor="Type",
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap(categoryExport,
index = c(Type, Export),
vSize="Export",
vColor="Type",
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap(categoryExport,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette="GrandBudapest2",
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette="GrandBudapest2",
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
library('treemap')
library(RColorBrewer)
categoryExport <-read_csv("data/Export_Goods_Category.csv")
NewYear <- filter(categoryExport, Year==2018)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "GrandBudapest2")
title="Resale Condominium by Planning Region and Area, 2017",
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "GrandBudapest2"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "RdYlGn"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap
#d3tree(treemap)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap
#d3tree(treemap)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap
d3tree(treemap)
library('treemap')
library(RColorBrewer)
library(d3treeR)
install.packages("d3treeR")
library('treemap')
library(RColorBrewer)
library(d3tree)
install.packages("d3tree")
Yes
install.packages(d3Tree)
install.packages('d3Tree')
library('treemap')
library(RColorBrewer)
library(d3tree)
library('treemap')
library(RColorBrewer)
library(d3Tree)
categoryExport <-read_csv("data/Export_Goods_Category.csv")
NewYear <- filter(categoryExport, Year==2018)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap
d3Tree(treemap)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap
d3tree(treemap)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap
d3tree(treemap, rootname="Export")
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
#treemap
d3tree(treemap, rootname="Export")
library('treemap')
library(RColorBrewer)
library(d3TreeR)
library('treemap')
library(RColorBrewer)
library(d3treeR)
install.packages(d3treeR)
install.packages('d3treeR')
library('treemap')
library(RColorBrewer)
library(d3Tree)
categoryExport <-read_csv("data/Export_Goods_Category.csv")
NewYear <- filter(categoryExport, Year==2018)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
#treemap
d3tree(treemap, rootname="Export")
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
#treemap
d3tree(treemap)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
#treemap
d3tree2(treemap)
devtools::install_github("timelyportfolio/d3treeR")
install.packages("viridisLite")
install.packages("remotes")
remotes::install_github("d3treeR/d3treeR")
library('treemap')
library(RColorBrewer)
library(d3treeR)
categoryExport <-read_csv("data/Export_Goods_Category.csv")
library('treemap')
library(RColorBrewer)
library(d3treeR)
library(tidyverse)
categoryExport <-read_csv("data/Export_Goods_Category.csv")
NewYear <- filter(categoryExport, Year==2018)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
#treemap
d3tree2(treemap)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
#treemap
d3tree2(treemap, rootname = "Export")
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
#treemap
d3tree2(treemap, rootname = "Export of product ")
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
d3tree2(treemap, rootname = "Export of product ")
d3tree2(NewYear, rootname="Export of product ", valueField = "Export", id = "Type")
d3tree2(NewYear, rootname="Export of product ", celltext = "Type", valueField = "Export", id = "Type")
library('treemap')
library(RColorBrewer)
library(d3treeR)
library(tidyverse)
categoryExport <-read_csv("data/Export_Goods_Category.csv")
NewYear <- filter(categoryExport, Year==2018)
treemap <- treemap(NewYear,
index = c("Type", "Export"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
d3tree2(treemap, rootname = "Export of product ")
shiny::runApp('D:/SMU/Term7/IS428 - Visual Analytics/Project/Project V1')
runApp('D:/SMU/Term7/IS428 - Visual Analytics/Project/Project V1')
runApp('D:/SMU/Term7/IS428 - Visual Analytics/Project/Project V1')
treemap <- treemap(NewYear,
index = c("Type", "Export", "Destination"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
d3tree2(treemap, rootname = "Export of product ")
treemap <- treemap(NewYear,
index = c("Type", "Export", "Destination"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
d3tree2(treemap, rootname = "Export of product ")
treemap <- treemap(NewYear,
index = c("Type", "Export", "Destination"),
vSize="Export"+"Destination",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
treemap <- treemap(NewYear,
index = c("Type", "Export", "Destination"),
vSize=c("Export","Destination"),
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
categoryExport$label <- paste(categoryExport$Destination, ", US$ ", categoryExport$Export, " Millions")
treemap <- treemap(NewYear,
index = c("Type", "label"),
vSize=c("Export","Destination"),
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
NewYear$label <- paste(NewYear$Destination, ", US$ ", NewYear$Export, " Millions")
treemap <- treemap(NewYear,
index = c("Type", "label"),
vSize="Export",
vColor="Type",
palette=brewer.pal(n=8, "Set3"),
title="Resale Condominium by Planning Region and Area, 2017",
title.legend = "Median Unit Price (S$ per sq. m)"
)
d3tree2(treemap, rootname = "Export of product ")
runApp('D:/SMU/Term7/IS428 - Visual Analytics/Project/Project V1')
runApp('D:/SMU/Term7/IS428 - Visual Analytics/Project/Project V1')
shiny::runApp('D:/SMU/Term7/IS428 - Visual Analytics/Project/Cakrawala')
install.packages("remotes")
install.packages(c("d3Tree", "devtools", "mapdata", "treemap"))
install.packages(c("d3Tree", "devtools", "mapdata", "treemap"))
shiny::runApp()
install.packages("treemap")
runApp()
install.packages("d3Tree")
runApp()
install.packages("d3TreeR")
install.packages("devtools")
install.packages("devtools")
shiny::runApp()
install.packages("shinydashboard")
shiny::runApp()
install.packages("mapdata")
install.packages("devtools")
shiny::runApp()
install.packages("remotes")
remotes::install_github("d3treeR/d3treeR")
runApp()
devtools::install_github("mattflor/chorddiag")
install.packages("shiny")
shiny::runApp('~/Cakrawala')
devtools::install_github("mattflor/chorddiag")
library(devtools)
devtools::install_github("mattflor/chorddiag")
shiny::runApp()
library(devtools)
sessionInfo()
devtools::install_github("mattflor/chorddiag")
